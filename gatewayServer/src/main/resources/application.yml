server:
  port: 8001 # 端口号
#  配置完成以后，直接访问网关对应的端口和服务，即可自动路由到对应的服务，然后返回数据
spring:
  application:
    name: gatewayServer # 服务名
  cloud:
    nacos:
      discovery:
        # server-addr: localhost:8848 # nacos地址
        server-addr: nacos:8848 # docker中的nacos地址
    gateway:
      routes: # 网关路由配置
        - id: userServer # 路由id，唯一标识，每个路由都需要一个id
          # uri: http://localhost:8001 # 路由目标地址，http://服务名
          uri: lb://userServer # 路由目标地址，lb://服务名，lb代表负载均衡
          predicates: # 路由断言，判断是否符合路由条件，断言为true时，才会路由
            - Path=/user/** # 只有请求路径匹配/user/**时，才会路由
          filters: # 路由过滤器，对请求进行过滤
        - id: orderServer
          # uri: http://localhost:8002
          uri: lb://orderServer
          predicates:
            - Path=/order/**
            #我们配置了路由规则以后，如果没有符合规则的请求，就会返回404，
            #我们可以配置一个默认的路由规则，当没有符合规则的请求时，就会路由到默认的路由规则上
          filters: # 过滤器会同时对请求和响应做处理
            - AddRequestHeader=X-Request-junw,caishuhan # 给请求添加一个请求头
      default-filters: # 默认的过滤器，当没有配置过滤器时，会使用默认的过滤器
        - AddRequestHeader=X-Request-junw,caishuhan # 给所有请求头添加默认的过滤器
        # 所有的过滤器，实际上都会被转换为gateway，所以能进行同时使用
        # 按照具体的顺序依次执行
        # - StripPrefix=1 # 去掉请求路径的前缀，比如请求路径为/order/1，去掉前缀后，请求路径为/1
        # - name: Hystrix # 熔断器，当请求超时或者异常时，会调用fallback方法
        #   args:
        #     name: fallback # fallback方法名
        #     fallbackUri: forward:/fallback # fallback方法所在的controller
      default-fallback: forward:/fallback # 默认的fallback方法，全局生效
      # 当没有符合路由规则的请求时，会调用默认的fallback方法
      # 所有的请求都会经过过滤器，过滤器可以对请求和响应做处理，比如添加请求头、去掉请求路径的前缀、熔断器等等。
      # 同一个类型的过滤器，会按照配置的顺序依次执行。1-2-3这种
      # 浏览器说的跨域问题，是浏览器的安全策略，不是后端的跨域问题
      # 具体而言，是禁止了ajax跨域请求，所以我们需要在后端配置跨域
      globalcors:
        add-to-simple-url-handler-mapping: true # 跨域配置，解决options请求404的问题，true表示不拦截
        cors-configurations:
          "[/**]": # 配置所有请求
            allowedOrigins: # 允许跨域的域名，*代表所有域名
              - "http://userServer:8010"
              - "http://orderServer:8011"
            allowedMethods: # 允许跨域的请求方法，*代表所有请求方法
              - "*"
            allowedHeaders: # 允许跨域的请求头，*代表所有请求头
            allowCredentials: true # 是否允许携带cookie
            maxAge: 1800 # 跨域的有效时间，单位为秒
          # cors:
          # allowed-origins: "*" # 允许跨域的域名，*代表所有域名
          # allowed-methods: "*" # 允许跨域的请求方法，*代表所有请求方法
          # allowed-headers: "*" # 允许跨域的请求头，*代表所有请求头
          # allow-credentials: true # 是否允许携带cookie
          # max-age: 1800 # 跨域的有效时间，单位为秒
  main:
    web-application-type: reactive # 指定webflux，而不是默认的webmvc，否则会因为依赖冲突无法启动项目
