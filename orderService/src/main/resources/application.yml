server:
  port: 8001
spring:
  datasource:
    url: jdbc:mysql://mysql:3306/cloud_order?useSSL=false # 这里的mysql是docker中的mysql服务的名称
    username: root
    password: LIU18959297292
    driver-class-name: com.mysql.jdbc.Driver
  #========================================================
  application:
    name: orderService # 服务名称，在euraka中展示
  cloud:
    nacos:
      #      server-addr: 192.168.3.145:8848 # nacos服务地址
      server-addr: nacos:8848 # 一样的，docker会自动解析
      discovery:
        cluster-name: dev # 集群名称
#        namespace: 4d6ce343-9e1b-44df-a90f-2cf2b6b3d177 # dev环境
#        ephemeral: false # 是否是临时实例
#========================================================
#mybatis:
#  type-aliases-package: wo1261931780.orderService.user.pojo
#  configuration:
#    map-underscore-to-camel-case: true
#logging:
#  level:
#    wo1261931780: debug
#  pattern:
#    dateformat: MM-dd HH:mm:ss:SSS
#========================================================
#要将服务注册到eureka上，需要在application.yml中添加以下内容：
#注册之前，需要在pom中引入客户端依赖
#eureka:
#  client:
#    service-url: # eureka的地址信息
#      defaultZone: http://127.0.0.1:10086/eureka
#========================================================
#注意这里是order服务中配置user的调用规则
userService:
  ribbon:
    NFLoadBalancerRuleClassName: com.alibaba.cloud.nacos.ribbon.NacosRule # 负载均衡规则
#    针对user服务的负载均衡规则
#这里是使用nacos的情况下，nacos的规则
#如果是原生的cloud，是netflex的规则
#nacos的规则是，优先采用本地集群，然后在内部继续采用随机的方式
#========================================================
#下面是懒加载的配置过程
ribbon:
  eager-load:
    enabled: true # 开启饥饿加载
    clients: # 指定饥饿加载的服务名称。项目第一次启动的时候加载，后面速度提高
      - userService
#========================================================
# 可以设置多种配置，比如超时时间等
feign:
  httpclient:
    enabled: true # 支持HttpClient的开关
    max-connections: 200 # 最大连接数
    max-connections-per-route: 50 # 单个路径的最大连接数
  client:
    config:
      default:
        connectTimeout: 5000 # 连接超时时间
        readTimeout: 5000 # 读取超时时间
        loggerLevel:
          basic # 日志级别，不写服务名称，表示所有服务都生效
        # basic，记录请求和响应的基本信息，
        # headers，记录请求和响应的头信息，full记录请求和响应的头信息和正文全部信息
