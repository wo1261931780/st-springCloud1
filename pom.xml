<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.0.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>wo1261931780</groupId>
	<artifactId>st-springCloud1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>st-springCloud1</name>
	<description>Demo project for Spring Boot</description>
	<modules>
		<!--基础的拆分-->
		<module>userService</module>
		<module>orderService</module>
		<!--添加注册中心的拆分-->
		<module>eurekaServer</module>
		<module>gatewayServer</module>
		<module>feignApi</module>
	</modules>
	<packaging>pom</packaging>
	<properties>
		<java.version>17</java.version>
		<!--<spring-native.version>0.12.1</spring-native.version>-->
		<!--maven的打包配置-->
		<maven.compiler.source>17</maven.compiler.source>
		<maven.compiler.target>17</maven.compiler.target>
		<!--编码格式-->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>
	<dependencies>
		<!--=============================================================================================-->
		<!--下面两个配置基本地启动，后面的按需修改-->
		<!--=============================================================================================-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
			<version>3.0.2</version>
		</dependency>
		<!--spring网络WEB-->
		<!--使用Spring MVC构建Web，包括RESTful，应用程序。使用Apache Tomcat作为默认的嵌入式容器。-->
		<!--里面已经包含了spring MVC的内容-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<version>3.0.2</version>
			<!--<scope>test</scope>-->
			<!--上面的scope表示作用范围-->
			<!--在没有说明的情况下，scope默认就是compile-->
			<!--如果我把mysql这些数据库驱动jar包设置为runtime-->
			<!--那么我在日常使用的过程中，是无法访问这些类的-->
		</dependency>
		<!--=============================================================================================-->
		<!--spring-->
		<!--=============================================================================================-->


		<!--=============================================================================================-->
		<!--springCloud-->
		<!--=============================================================================================-->
		<!-- springCloud -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-dependencies</artifactId>
			<version>2022.0.0</version>
			<!--    <version>2022.0.1</version>-->
			<type>pom</type>
			<scope>import</scope>
		</dependency>
		<!--nacos的管理依赖-->
		<!--其实有了nacos，就不需要eureka了-->
		<!--所以同时要把子项目中的eureka依赖注释掉-->
		<dependency>
			<groupId>com.alibaba.cloud</groupId>
			<artifactId>spring-cloud-alibaba-dependencies</artifactId>
			<version>2022.0.0.0</version>
			<!--			<version>2.2.5.RELEASE</version>-->
			<type>pom</type>
			<scope>import</scope>
		</dependency>
		<!--=============================================================================================-->
		<!--DEVELOPER_TOOLS-->
		<!--=============================================================================================-->
		<!--Lombok 开发者工具-->
		<!--帮助减少模板代码的Java注释库。-->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
			<scope>provided</scope>
			<!--因为只是源代码中提供了对应的功能-->
			<!--所以其实不需要参与源代码的打包-->
		</dependency>
		<!--=============================================================================================-->
		<!--WEB-->
		<!--=============================================================================================-->


		<!--=============================================================================================-->
		<!--MESSAGING-->
		<!--=============================================================================================-->


		<!--=============================================================================================-->
		<!--日志系统-->
		<!--=============================================================================================-->


		<!--=============================================================================================-->
		<!--数据库-->
		<!--=============================================================================================-->
		<!--JDBC API SQL-->
		<!--数据库连接API，定义了客户端如何连接和查询数据库。-->
		<!--没有配置，项目报错，启动失败-->
		<!--<dependency>-->
		<!--    <groupId>org.springframework.boot</groupId>-->
		<!--    &lt;!&ndash;spring操作数据库的包&ndash;&gt;-->
		<!--    <artifactId>spring-boot-starter-data-jdbc</artifactId>-->
		<!--</dependency>-->

		<!--Spring Data JDBC SQL-->
		<!--使用Spring Data，用普通的JDBC在SQL存储中保存数据。-->
		<!--没有配置，项目报错，启动失败-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>
		<!--MySQL JDBC driver.驱动-->
		<!--mysql的驱动-->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.33</version>
			<scope>runtime</scope>
		</dependency>


		<!--=============================================================================================-->
		<!--Mybatis-->
		<!--=============================================================================================-->
		<!--mybatis的分页助手插件-->
		<dependency>
			<groupId>com.github.pagehelper</groupId>
			<artifactId>pagehelper</artifactId>
			<version>5.3.3</version>
		</dependency>
		<!--MyBatis框架SQL-->
		<!--持久性框架，支持自定义SQL，存储过程和高级映射。MyBatis使用XML描述符或注解将对象与存储程序或SQL语句结合起来。-->
		<!--这里是mybatis按照spring的标准，开发出来的整合包-->
		<!--没有配置，项目报错，启动失败-->
		<!--<dependency>-->
		<!--	<groupId>org.mybatis.spring.boot</groupId>-->
		<!--	<artifactId>mybatis-spring-boot-starter</artifactId>-->
		<!--	<version>3.0.1</version>-->
		<!--</dependency>-->

		<!--使用mybatis-plus以后，这些东西就不需要了-->
		<!--没有配置，项目报错，启动失败-->
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus-boot-starter</artifactId>
			<version>3.5.3.2</version>
			<!--依赖中一共两个jar包-->
			<!--一个是mybatis和spring整合包-->
			<!--一个是mybatis包-->
		</dependency>
		<!-- mybatis-plus 多数据源 -->
		<!--		目前，多数项目会有多数据源的要求，或者是主从部署的要求，所以我们还需要引入 mybatis-plus 关于多数据源的依赖：-->
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>dynamic-datasource-spring-boot-starter</artifactId>
			<version>3.6.1</version>
		</dependency>

		<!--mybatis-plus的代码生成器-->
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus-generator</artifactId>
			<version>3.5.3.2</version>
		</dependency>

		<!--生成器对应的模板技术-->
		<dependency>
			<groupId>org.apache.velocity</groupId>
			<artifactId>velocity-engine-core</artifactId>
			<version>2.3</version>
		</dependency>
		<!--mybatis-plus-generator-ui可视化工具-->
		<!--提供交互式的Web UI用于生成兼容mybatis-plus框架的相关功能代码，-->
		<!--包括Entity,Mapper,Mapper.xml,Service,Controller等 ，-->
		<!--可以自定义模板以及各类输出参数，也可通过SQL查询语句直接生成代码。-->
		<!--<dependency>-->
		<!--    <groupId>com.github.davidfantasy</groupId>-->
		<!--    <artifactId>mybatis-plus-generator-ui</artifactId>-->
		<!--    <version>2.0.1</version>-->
		<!--    <scope>test</scope>-->
		<!--</dependency>-->
		<!--这里需要使用swagger技术，实际上是为了生成接口文档-->
		<dependency>
			<groupId>com.github.xiaoymin</groupId>
			<artifactId>knife4j-spring-boot-starter</artifactId>
			<version>3.0.3</version>
		</dependency>
		<!--=============================================================================================-->
		<!--数据库连接池-->
		<!--=============================================================================================-->


		<!--=============================================================================================-->
		<!--redis的包-->
		<!--=============================================================================================-->


		<!--=============================================================================================-->
		<!--TEST-->
		<!--=============================================================================================-->
		<!--使用包括JUnit Jupiter、Hamcrest和Mockito在内的库测试Spring Boot应用程序的入门者-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<version>3.1.0</version>
			<scope>test</scope>
		</dependency>

		<!--Spring Test支持用JUnit或TestNG对Spring组件进行单元测试和集成测试。-->
		<!--它提供了一致的Spring ApplicationContexts的加载和缓存，并提供了模拟对象，你可以用它来孤立地测试你的代码。-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
		</dependency>


		<!--=============================================================================================-->
		<!--安全框架-->
		<!--=============================================================================================-->


		<!--=============================================================================================-->
		<!--dubbo相关-->
		<!--=============================================================================================-->


		<!--=============================================================================================-->
		<!--文件IO-->
		<!--=============================================================================================-->


		<!--=============================================================================================-->
		<!--项目特殊依赖-->
		<!--=============================================================================================-->


	</dependencies>
	<repositories>
		<!--阿里云搭建了一个国内镜像http://maven.aliyun.com，跑起来速度很快，可以进行配置-->
		<repository>
			<id>nexus-aliyun</id>
			<name>nexus-aliyun</name>
			<url>https://maven.aliyun.com/nexus/content/groups/public/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-releases</id>
			<name>Spring Releases</name>
			<url>https://repo.spring.io/release</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<releases>
				<enabled>false</enabled>
			</releases>
		</repository>
	</repositories>
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>3.1.4</version>
			</plugin>
		</plugins>
	</build>

</project>
